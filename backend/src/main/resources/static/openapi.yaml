openapi: 3.1.0
info:
  title: PingTower Monitoring API
  version: 1.0.0
  description: |
    PingTower Monitoring API - полная спецификация всех endpoint'ов.
    
    ## Аутентификация
    Для большинства операций требуется JWT токен в заголовке Authorization: Bearer <token>.
    
    **Публичные endpoints (без JWT):**
    - GET /api/health - проверка работоспособности
    - GET /api/info - информация о API  
    - POST /api/auth/register - регистрация пользователя
    - POST /api/auth/login - вход в систему
    
    **Защищённые endpoints:** все остальные требуют JWT токен.
    
    Получите токен через /api/auth/login, затем используйте кнопку "Authorize" справа.
servers:
  - url: /v1
    description: Base server (context-path /v1)
security:
  - bearerAuth: []
paths:
  /api/health:
    get:
      summary: Health Check
      operationId: getApiHealth
      tags: [API]
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiHealthResponse'
  /api/info:
    get:
      summary: API Info
      operationId: getApiInfo
      tags: [API]
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfoResponse'

  /api/auth/register:
    post:
      summary: Register user
      operationId: registerUser
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400': { description: Invalid data }
  /api/auth/login:
    post:
      summary: Login user
      operationId: loginUser
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401': { description: Unauthorized }
  /api/auth/profile:
    get:
      summary: Get profile
      operationId: getProfile
      tags: [Auth]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401': { description: Unauthorized }

  /api/services:
    get:
      summary: List services
      operationId: listServices
      tags: [Services]
      parameters:
        - in: query
          name: enabled
          schema: { type: boolean }
        - in: query
          name: search
          schema: { type: string }
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMonitoredServiceResponse'
    post:
      summary: Create service
      operationId: createService
      tags: [Services]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MonitoredServiceRequest'
      responses:
        '201': { description: Created }
        '400': { description: Bad Request }
  /api/services/{id}:
    get:
      summary: Get service
      operationId: getServiceById
      tags: [Services]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/MonitoredServiceResponse' } } } }
        '404': { description: Not Found }
    put:
      summary: Update service
      operationId: updateService
      tags: [Services]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MonitoredServiceRequest' }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
  /api/services/{id}/status:
    put:
      summary: Toggle service status
      operationId: toggleServiceStatus
      tags: [Services]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: enabled
          required: true
          schema: { type: boolean }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
  /api/services/{id}/test:
    post:
      summary: Test service
      operationId: testService
      tags: [Services]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }

  /api/checks:
    get:
      summary: List checks
      operationId: listChecks
      tags: [Checks]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50, maximum: 500 }
        - in: query
          name: cursor
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/CheckDto' }
                  next_cursor:
                    type: string
                    nullable: true
    post:
      summary: Create check
      operationId: createCheck
      tags: [Checks]
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CheckCreateDto' }
      responses:
        '201': { description: Created }
        '409': { description: Conflict }

  /api/notifications/channels/create:
    post:
      summary: Create notification channel (legacy path)
      operationId: createNotificationChannelLegacy
      tags: [Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateNotificationChannelRequest' }
      responses:
        '201': { description: Created }
  /api/notifications/channels/list:
    get:
      summary: List notification channels (legacy path)
      operationId: listNotificationChannelsLegacy
      tags: [Notifications]
      responses:
        '200': { description: OK }
  /api/notifications/deliveries:
    get:
      summary: List deliveries
      operationId: listNotificationDeliveries
      tags: [Notifications]
      responses:
        '200': { description: OK }
  /api/notifications/test:
    post:
      summary: Send test notification
      operationId: sendTestNotification
      tags: [Notifications]
      parameters:
        - in: query
          name: channelId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TestNotificationRequest' }
      responses:
        '200': { description: OK }
  /api/notifications/send:
    post:
      summary: Send notification
      operationId: sendNotification
      tags: [Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NotificationRequest' }
      responses:
        '200': { description: OK }

  /api/alerts:
    get:
      summary: List alerts
      operationId: listAlerts
      tags: [Alerts]
      parameters:
        - in: query
          name: serviceId
          schema: { type: integer, format: int64 }
        - in: query
          name: resolved
          schema: { type: boolean }
        - in: query
          name: severity
          schema: { type: string }
        - in: query
          name: since
          schema: { type: string, format: date-time }
      responses:
        '200': { description: OK }
  /api/alerts/{id}:
    get:
      summary: Get alert
      operationId: getAlert
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }
    delete:
      summary: Delete alert
      operationId: deleteAlert
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: No Content }
        '404': { description: Not Found }
  /api/alerts/{id}/resolve:
    put:
      summary: Resolve alert
      operationId: resolveAlert
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200': { description: OK }
        '404': { description: Not Found }

  /api/monitoring/results:
    get:
      summary: Get recent check results
      operationId: getRecentResults
      tags: [Monitoring]
      parameters:
        - in: query
          name: serviceId
          schema: { type: integer, format: int64 }
        - in: query
          name: successful
          schema: { type: boolean }
        - in: query
          name: since
          schema: { type: string, format: date-time }
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCheckResultResponse'
  /api/monitoring/services/{serviceId}/results:
    get:
      summary: Get service check results
      operationId: getServiceResults
      tags: [Monitoring]
      parameters:
        - in: path
          name: serviceId
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: since
          schema: { type: string, format: date-time }
        - in: query
          name: until
          schema: { type: string, format: date-time }
        - $ref: '#/components/parameters/PageablePage'
        - $ref: '#/components/parameters/PageableSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCheckResultResponse'
        '404': { description: Service not found }
  /api/monitoring/services/{serviceId}/metrics:
    get:
      summary: Get service metrics
      operationId: getServiceMetrics
      tags: [Monitoring]
      parameters:
        - in: path
          name: serviceId
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: since
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceMetricsResponse'
        '404': { description: Service not found }
        '500': { description: Internal server error }
  /api/monitoring/health:
    get:
      summary: Get system health
      operationId: getSystemHealth
      tags: [Monitoring]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthResponse'
        '500': { description: Internal server error }
  /api/monitoring/dashboard:
    get:
      summary: Get dashboard data
      operationId: getDashboardData
      tags: [Monitoring]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceStatusResponse'
        '500': { description: Internal server error }

  /api/notifications/channels:
    get:
      summary: Get notification channels
      operationId: getNotificationChannels
      tags: [Notifications]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationChannelResponse'
    post:
      summary: Create notification channel
      operationId: createNotificationChannel
      tags: [Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationChannelRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelResponse'
        '400': { description: Bad request }
  /api/notifications/channels/{id}:
    put:
      summary: Update notification channel
      operationId: updateNotificationChannel
      tags: [Notifications]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationChannelRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationChannelResponse'
        '404': { description: Channel not found }
        '400': { description: Bad request }
    delete:
      summary: Delete notification channel
      operationId: deleteNotificationChannel
      tags: [Notifications]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: No content }
        '404': { description: Channel not found }
  /api/notifications/channels/{id}/test:
    post:
      summary: Test notification channel
      operationId: testNotificationChannel
      tags: [Notifications]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '404': { description: Channel not found }
        '500': { description: Test failed }

  /runs:
    get:
      summary: Get check runs
      operationId: listRuns
      tags: [Runs]
      parameters:
        - in: query
          name: check_id
          schema: { type: string, format: uuid }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: limit
          schema: { type: integer, default: 1000, maximum: 10000 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/RunDto'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageablePage:
      name: page
      in: query
      schema: { type: integer, minimum: 0, default: 0 }
    PageableSize:
      name: size
      in: query
      schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
  schemas:
    ApiHealthResponse:
      type: object
      properties:
        service: { type: string }
        version: { type: string }
        status: { type: string }
        timestamp: { type: integer, format: int64 }
    ApiInfoResponse:
      type: object
      properties:
        name: { type: string }
        version: { type: string }
        description: { type: string }
        endpoints:
          type: array
          items: { type: string }
    RegisterRequest:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email: { type: string, format: email }
        password:
          type: string
          format: password
          minLength: 6
      example:
        username: johndoe
        email: john@example.com
        password: 123456
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
      example:
        email: john@example.com
        password: 123456
    AuthResponse:
      type: object
      properties:
        token: { type: string, description: JWT access token }
        type: { type: string, description: Token type, example: Bearer }
        id: { type: integer, format: int64 }
        username: { type: string }
        email: { type: string }
        roles:
          type: array
          items: { type: string }
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example.signature
        type: Bearer
        id: 1
        username: johndoe
        email: john@example.com
        roles: [USER]
    UserProfile:
      type: object
      properties:
        id: { type: integer, format: int64 }
        username: { type: string }
        email: { type: string }
        isActive: { type: boolean }
      example:
        id: 1
        username: johndoe
        email: john@example.com
        isActive: true
    MonitoredServiceRequest:
      type: object
      required: [name, url, serviceType, enabled]
      properties:
        name:
          type: string
          description: Service name is required
        description: { type: string }
        url:
          type: string
          pattern: '^https?://.*'
          description: URL must start with http:// or https://
        serviceType:
          type: string
          enum: [PING, API]
          description: Service type must be PING or API
        enabled:
          type: boolean
          description: Enabled status is required
        checkIntervalMinutes:
          type: integer
          minimum: 1
          maximum: 1440
          default: 5
          description: Check interval must be 1-1440 minutes
        timeoutSeconds:
          type: integer
          minimum: 1
          maximum: 300
          default: 30
          description: Timeout must be 1-300 seconds
        httpMethod:
          type: string
          default: GET
        headers:
          type: object
          additionalProperties: { type: string }
        requestBody: { type: string }
        queryParams:
          type: object
          additionalProperties: { type: string }
        expectedStatusCode:
          type: integer
          default: 200
        expectedResponseBody: { type: string }
    MonitoredServiceResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        description: { type: string }
        url: { type: string }
        serviceType: { type: string, enum: [PING, API] }
        enabled: { type: boolean }
        checkIntervalMinutes: { type: integer }
        timeoutSeconds: { type: integer }
        httpMethod: { type: string }
        headers:
          type: object
          additionalProperties: { type: string }
        requestBody: { type: string }
        queryParams:
          type: object
          additionalProperties: { type: string }
        expectedStatusCode: { type: integer }
        expectedResponseBody: { type: string }
        isAlive: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PageMonitoredServiceResponse:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/MonitoredServiceResponse' }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
        size: { type: integer }
        number: { type: integer }
    CheckDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        type: { type: string }
        target: { type: string }
        interval_sec: { type: integer }
        enabled: { type: boolean }
        created_at: { type: string, format: date-time }
    CheckCreateDto:
      type: object
      properties:
        name: { type: string }
        type: { type: string }
        target: { type: string }
        interval_sec: { type: integer }
    CreateNotificationChannelRequest:
      type: object
      properties:
        type: { type: string }
        name: { type: string }
        configuration: { type: string }
        isDefault: { type: boolean }
    NotificationRequest:
      type: object
      properties:
        username: { type: string }
        serviceName: { type: string }
        serviceUrl: { type: string }
        status: { type: string, enum: [up, down] }
        severity: { type: string, enum: [INFO, WARNING, ERROR, CRITICAL] }
        message: { type: string }
      required: [username, serviceName, message]
      example:
        username: johndoe
        serviceName: Billing API
        serviceUrl: https://billing.example.com/health
        status: down
        severity: CRITICAL
        message: Service is not responding for 120s
    TestNotificationRequest:
      type: object
      properties:
        message: { type: string }
    NotificationChannelResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        type: { type: string }
        configuration:
          type: object
          additionalProperties: { type: string }
        enabled: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    AlertResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        serviceId: { type: integer, format: int64 }
        message: { type: string }
        severity: { type: string }
        resolved: { type: boolean }
        triggeredAt: { type: string, format: date-time }
        resolvedAt: { type: string, format: date-time }
        metadata:
          type: object
          additionalProperties: { type: string }
    CheckResultResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        serviceId: { type: integer, format: int64 }
        serviceName: { type: string }
        checkedAt: { type: string, format: date-time }
        successful: { type: boolean }
        responseCode: { type: integer }
        responseTimeMs: { type: integer }
        errorMessage: { type: string }
    PageCheckResultResponse:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/CheckResultResponse' }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
        size: { type: integer }
        number: { type: integer }
    ServiceMetricsResponse:
      type: object
      properties:
        serviceId: { type: integer, format: int64 }
        serviceName: { type: string }
        serviceUrl: { type: string }
        totalChecks: { type: integer, format: int64 }
        successfulChecks: { type: integer, format: int64 }
        failedChecks: { type: integer, format: int64 }
        averageResponseTime: { type: number, format: double }
        minResponseTime: { type: integer }
        maxResponseTime: { type: integer }
        uptimePercentage: { type: number, format: double }
        periodStart: { type: string, format: date-time }
        periodEnd: { type: string, format: date-time }
    SystemHealthResponse:
      type: object
      properties:
        totalServices: { type: integer, format: int64 }
        activeServices: { type: integer, format: int64 }
        recentChecks: { type: integer, format: int64 }
        recentFailures: { type: integer, format: int64 }
        successRate: { type: number, format: double }
        timestamp: { type: string, format: date-time }
    ServiceStatusResponse:
      type: object
      properties:
        serviceId: { type: integer, format: int64 }
        serviceName: { type: string }
        serviceUrl: { type: string }
        status: { type: string, enum: [UP, DOWN, UNKNOWN, ERROR] }
        responseCode: { type: integer }
        responseTimeMs: { type: integer }
        lastChecked: { type: string, format: date-time }
        enabled: { type: boolean }
    RunDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        check_id: { type: string, format: uuid }
        started_at: { type: string, format: date-time }
        finished_at: { type: string, format: date-time }
        latency_ms: { type: integer }
        status: { type: string, enum: [UP, DOWN, DEGRADED] }
    NotificationChannelRequest:
      type: object
      required: [name, type, configuration, enabled]
      properties:
        name: { type: string }
        type: { type: string }
        configuration:
          type: object
          additionalProperties: { type: string }
        enabled: { type: boolean }

