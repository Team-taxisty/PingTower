import requests
import json
import time

def test_java_backend_notification():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Java –±—ç–∫–µ–Ω–¥"""
    
    # URL Java –±—ç–∫–µ–Ω–¥–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8080)
    url = "http://localhost:8080/notifications/send"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "username": "testuser",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω
        "serviceName": "Test Web Server",
        "serviceUrl": "https://example.com",
        "status": "down", 
        "severity": "ERROR",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Java –±—ç–∫–µ–Ω–¥ - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    }
    
    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Java –±—ç–∫–µ–Ω–¥...")
        response = requests.post(url, json=test_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram: https://t.me/PingTower_tax_bot")
                print(f"üìä Delivery ID: {result.get('delivery_id')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
        else:
            print(f"‚ùå HTTP Error {response.status_code}: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Java –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_java_backend_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Java –±—ç–∫–µ–Ω–¥–∞"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints
        endpoints = [
            "http://localhost:8080/actuator/health",
            "http://localhost:8080/notifications/channels",
            "http://localhost:8080/api/health"
        ]
        
        for endpoint in endpoints:
            try:
                response = requests.get(endpoint, timeout=5)
                if response.status_code == 200:
                    print(f"‚úÖ Java –±—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    print(f"üìä Endpoint: {endpoint}")
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {response.json()}")
                    return True
            except:
                continue
                
        print("‚ùå Java –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def test_create_notification_channel():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Python –±–æ—Ç–∞"""
    
    url = "http://localhost:8080/notifications/channels"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Python –±–æ—Ç–∞
    channel_data = {
        "type": "PYTHON_BOT",
        "name": "Python Bot Channel",
        "configuration": json.dumps({
            "botUrl": "http://localhost:5000"
        }),
        "isDefault": True
    }
    
    try:
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Python –±–æ—Ç–∞...")
        response = requests.post(url, json=channel_data, timeout=10)
        
        if response.status_code == 201:
            print("‚úÖ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ö–∞–Ω–∞–ª: {response.json()}")
        else:
            print(f"‚ùå HTTP Error {response.status_code}: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Java –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Java Backend Notifications")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Java –±—ç–∫–µ–Ω–¥–∞...")
    health_ok = test_java_backend_health()
    print()
    
    if health_ok:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        print("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        test_create_notification_channel()
        print()
        
        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("3Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        test_java_backend_notification()
    else:
        print("‚ùå Java –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.")
