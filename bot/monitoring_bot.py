import telebot
import sqlite3
import hashlib
import secrets
import logging
from flask import Flask, request, jsonify
import threading
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
BOT_TOKEN = os.getenv('BOT_TOKEN', '7479905970:AAGRDlnda26Aw6Bfbq9HyaPWFmOQt1aAb3o')
bot = telebot.TeleBot(BOT_TOKEN)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è API
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect('monitoring_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            is_registered BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_services (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER,
            service_name TEXT NOT NULL,
            service_url TEXT,
            FOREIGN KEY (chat_id) REFERENCES users (chat_id)
        )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("Database initialized successfully")

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_registered(chat_id):
    conn = sqlite3.connect('monitoring_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_registered FROM users WHERE chat_id = ?', (chat_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0]

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(chat_id, username, password):
    conn = sqlite3.connect('monitoring_bot.db')
    cursor = conn.cursor()
    password_hash = hash_password(password)
    
    try:
        cursor.execute('''
            INSERT INTO users (chat_id, username, password_hash, is_registered) 
            VALUES (?, ?, ?, TRUE)
        ''', (chat_id, username, password_hash))
        conn.commit()
        conn.close()
        logger.info(f"User {username} registered successfully with chat_id {chat_id}")
        return True
    except sqlite3.IntegrityError:
        conn.close()
        logger.warning(f"Registration failed for {username} - username already exists")
        return False

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
user_registration_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    chat_id = message.chat.id
    logger.info(f"Start command received from chat_id: {chat_id}")
    
    if is_user_registered(chat_id):
        bot.send_message(chat_id, 
            "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PingTower Bot!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("üîê –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="register"))
        
        bot.send_message(chat_id, 
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **PingTower Monitoring Bot**!\n\n"
            "üîî –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–∞–¥–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é –æ—Ç –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
            reply_markup=markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == "register")
def registration_callback(call):
    chat_id = call.message.chat.id
    user_registration_data[chat_id] = {"step": "username"}
    
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text="üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ PingTower Bot**\n\n"
             "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: message.chat.id in user_registration_data)
def handle_registration(message):
    chat_id = message.chat.id
    text = message.text.strip()
    
    if chat_id not in user_registration_data:
        return
    
    step = user_registration_data[chat_id]["step"]
    
    if step == "username":
        if len(text) < 3:
            bot.send_message(chat_id, "‚ùå –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        user_registration_data[chat_id]["username"] = text
        user_registration_data[chat_id]["step"] = "password"
        bot.send_message(chat_id, "üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
        
    elif step == "password":
        if len(text) < 6:
            bot.send_message(chat_id, "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        username = user_registration_data[chat_id]["username"]
        
        if register_user(chat_id, username, text):
            bot.send_message(chat_id, 
                f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üë§ –õ–æ–≥–∏–Ω: `{username}`\n"
                f"üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                parse_mode='Markdown')
        else:
            bot.send_message(chat_id, 
                "‚ùå **–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        
        del user_registration_data[chat_id]

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
@bot.message_handler(commands=['status'])
def status_command(message):
    chat_id = message.chat.id
    
    if not is_user_registered(chat_id):
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    conn = sqlite3.connect('monitoring_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT username, created_at FROM users WHERE chat_id = ?', (chat_id,))
    user_data = cursor.fetchone()
    username, created_at = user_data
    
    cursor.execute('SELECT COUNT(*) FROM user_services WHERE chat_id = ?', (chat_id,))
    services_count = cursor.fetchone()[0]
    conn.close()
    
    bot.send_message(chat_id, 
        f"üìä **–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PingTower**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{username}`\n"
        f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {services_count}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at[:10]}\n"
        f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", parse_mode='Markdown')

# API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –≤–µ–±-—Å–∞–π—Ç–∞
@app.route('/send_notification', methods=['POST'])
def send_notification():
    try:
        data = request.json
        username = data.get('username')
        service_name = data.get('service_name')
        service_url = data.get('service_url', '')
        status = data.get('status', 'down')
        message = data.get('message', '')
        
        if not username or not service_name:
            return jsonify({'error': 'Username and service_name are required'}), 400
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
        conn = sqlite3.connect('monitoring_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT chat_id FROM users WHERE username = ? AND is_registered = TRUE', (username,))
        result = cursor.fetchone()
        
        if not result:
            conn.close()
            logger.warning(f"Notification failed - user {username} not found or not registered")
            return jsonify({'error': 'User not found or not registered'}), 404
        
        chat_id = result[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_emoji = "üî¥" if status == "down" else "üü¢"
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        notification_text = f"{status_emoji} **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PingTower**\n\n"
        notification_text += f"üè∑Ô∏è **–°–µ—Ä–≤–∏—Å:** `{service_name}`\n"
        if service_url:
            notification_text += f"üîó **URL:** {service_url}\n"
        notification_text += f"üìä **–°—Ç–∞—Ç—É—Å:** {'‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω' if status == 'down' else '‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        if message:
            notification_text += f"üí¨ **–î–µ—Ç–∞–ª–∏:** {message}\n"
        notification_text += f"‚è∞ **–í—Ä–µ–º—è:** {timestamp}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.send_message(chat_id, notification_text, parse_mode='Markdown')
        
        conn.close()
        logger.info(f"Notification sent successfully to user {username} (chat_id: {chat_id})")
        return jsonify({'success': True, 'message': 'Notification sent successfully'}), 200
        
    except Exception as e:
        logger.error(f"Error sending notification: {e}")
        return jsonify({'error': 'Internal server error'}), 500

# API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'healthy', 'bot': 'PingTower_tax_bot'}), 200

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
ü§ñ **PingTower Monitoring Bot - –°–ø—Ä–∞–≤–∫–∞**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è  
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîî **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã

üí° **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**
1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –≤ –±–æ—Ç–µ –ø–æ –ª–æ–≥–∏–Ω—É/–ø–∞—Ä–æ–ª—é
2Ô∏è‚É£ –í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç
3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ —Å–≤–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö

üîß **API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**
POST /send_notification
{
"username": "–≤–∞—à_–ª–æ–≥–∏–Ω",
"service_name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞",
"service_url": "https://example.com",
"status": "down",
"message": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}

üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    if not is_user_registered(message.chat.id):
        bot.send_message(message.chat.id, 
            "‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    else:
        bot.send_message(message.chat.id,
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    port = int(os.getenv('FLASK_PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_database()
        
        # –ó–∞–ø—É—Å–∫ Flask API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()
        
        logger.info("ü§ñ PingTower Bot started successfully!")
        logger.info(f"üì° Bot available at: https://t.me/PingTower_tax_bot")
        logger.info(f"üîå API endpoint: http://localhost:5000/send_notification")
        logger.info(f"‚ù§Ô∏è Health check: http://localhost:5000/health")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.polling(none_stop=True, interval=0)
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")

